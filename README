Loop Call Weirdness:
http://eli.thegreenplace.net/2013/12/03/intel-i7-loop-performance-anomaly/

Confusing case where adding additional instructions makes a loop faster.

Oddnesses:  

tight, call:
As pointed out by Eli, adding a superfluous call statement make the tight loop faster.  The same speed might make sense given a modern superscalar processor, but faster?  

variable:
It was suggested by CAF that passing the global counter as a variable to the function might be faster, as it would avoid RIP relative addressing and potential false aliasing.  No difference.

write, prefetch, readdummy, readself:
Putting a memory access in between the store and the reload seems to help.   Reading an unrelated variable is fastest, but rereading the same works well to.  Best if the register is the same.   Maybe has to do with "Store-to-load forwarding" restrictions?  Call also uses Ports 2/3, so there is a commonality.

jump, 2mod:
Counter-counter-intuitively, calling 'call' only half the time speeds things up.  This is hard to make sense of.  Perhaps because the call prevents the Loop Stream Detector from functioning?

exchange:
Currently the fastest solution is to add what should be a no-op 'xchg reg,reg' between the load and the store.  The fastest is to use the same register as is being used for counter.  Using the counter register plus another is slightly less fast, and using two unrelated is worse.  Obviously this means it isn't working as a NOP.  





